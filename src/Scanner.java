// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: flex/mrl_v0.flex

import java.io.*;
import java_cup.runtime.*;
import exceptions.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\121\u1100\1\u2900"+
    "\4\u1100\1\u2a00\1\u1100\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00"+
    "\1\u3000\53\u1100\1\u3100\41\u2100\1\u1100\1\u3200\1\u3300\1\u1100"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u2100\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2100\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2100\1\u4f00"+
    "\1\u5000\1\u5100\1\u2100\3\u1100\1\u5200\1\u5300\1\u5400\12\u2100"+
    "\4\u1100\1\u5500\17\u2100\2\u1100\1\u5600\41\u2100\2\u1100\1\u5700"+
    "\1\u5800\2\u2100\1\u5900\1\u5a00\27\u1100\1\u5b00\2\u1100\1\u5c00"+
    "\45\u2100\1\u1100\1\u5d00\1\u5e00\11\u2100\1\u5f00\27\u2100\1\u6000"+
    "\1\u6100\1\u6200\1\u6300\11\u2100\1\u6400\1\u6500\5\u2100\1\u6600"+
    "\1\u6700\4\u2100\1\u6800\21\u2100\246\u1100\1\u6900\20\u1100\1\u6a00"+
    "\1\u6b00\25\u1100\1\u6c00\34\u1100\1\u6d00\14\u2100\2\u1100\1\u6e00"+
    "\u0e05\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\0\1\5\1\0\1\6\2\0\1\7\1\10"+
    "\1\11\1\12\1\0\1\13\1\14\1\15\1\16\11\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\30\1\32\1\33\1\34\2\33"+
    "\1\35\1\36\1\37\1\40\1\41\1\33\1\42\1\43"+
    "\1\44\1\45\1\46\2\33\1\47\1\33\4\0\1\50"+
    "\1\0\4\51\1\52\1\53\2\51\1\54\2\51\1\55"+
    "\1\51\1\56\4\51\1\57\1\60\6\51\1\61\1\62"+
    "\1\63\54\0\1\51\12\0\1\51\4\0\1\51\5\0"+
    "\27\33\1\0\7\33\30\51\1\0\10\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\2\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\2\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\2\33\1\51\1\33\1\51"+
    "\1\33\3\51\2\33\1\51\1\33\1\51\2\33\1\51"+
    "\3\33\2\51\4\33\1\51\2\33\1\51\3\33\3\51"+
    "\2\33\1\51\2\33\1\51\1\33\1\51\1\33\1\51"+
    "\2\33\1\51\1\33\2\51\1\33\1\51\2\33\1\51"+
    "\3\33\1\51\1\33\1\51\2\33\2\51\2\33\3\51"+
    "\6\33\1\51\2\33\1\51\2\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\2\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\2\51"+
    "\2\33\1\51\1\33\1\51\3\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\7\51"+
    "\2\33\1\51\2\33\2\51\1\33\1\51\4\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\105\51"+
    "\1\33\44\51\7\33\2\51\4\0\14\33\16\0\5\51"+
    "\7\0\1\33\1\0\1\33\126\0\1\64\52\0\1\33"+
    "\1\51\1\33\1\51\1\33\1\0\1\33\1\51\2\0"+
    "\4\51\1\0\1\33\6\0\1\33\1\0\3\33\1\0"+
    "\1\33\1\0\2\33\1\51\21\33\1\0\11\33\43\51"+
    "\1\33\2\51\3\33\3\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\5\51\1\33\1\51\1\0\1\33"+
    "\1\51\2\33\2\51\63\33\60\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\10\0"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\2\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\2\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\0\46\33\2\0\1\33"+
    "\6\0\51\51\107\0\33\33\4\0\4\33\55\0\53\33"+
    "\25\0\12\33\4\0\2\33\1\0\143\33\1\0\1\33"+
    "\17\0\2\33\7\0\17\33\2\0\1\33\20\0\1\33"+
    "\1\0\36\33\35\0\131\33\13\0\1\33\16\0\53\33"+
    "\11\0\2\33\4\0\1\33\5\0\26\33\4\0\1\33"+
    "\11\0\1\33\3\0\1\33\27\0\31\33\7\0\13\33"+
    "\65\0\25\33\1\0\10\33\106\0\66\33\3\0\1\33"+
    "\22\0\1\33\7\0\12\33\4\0\12\33\1\0\20\33"+
    "\4\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\1\33\3\0\4\33\3\0\1\33\20\0\1\33"+
    "\15\0\2\33\1\0\3\33\4\0\14\33\12\0\1\33"+
    "\10\0\6\33\4\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\2\33\1\0\2\33\37\0\4\33"+
    "\1\0\1\33\7\0\12\33\2\0\3\33\20\0\11\33"+
    "\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\3\0\1\33\22\0\1\33\17\0\2\33"+
    "\4\0\12\33\11\0\1\33\13\0\10\33\2\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\3\0\1\33\36\0\2\33\1\0\3\33\4\0\12\33"+
    "\1\0\1\33\21\0\1\33\1\0\6\33\3\0\3\33"+
    "\1\0\4\33\3\0\2\33\1\0\1\33\1\0\2\33"+
    "\3\0\2\33\3\0\3\33\3\0\14\33\26\0\1\33"+
    "\25\0\12\33\25\0\10\33\1\0\3\33\1\0\27\33"+
    "\1\0\20\33\3\0\1\33\32\0\3\33\5\0\2\33"+
    "\4\0\12\33\20\0\1\33\4\0\10\33\1\0\3\33"+
    "\1\0\27\33\1\0\12\33\1\0\5\33\3\0\1\33"+
    "\40\0\1\33\1\0\2\33\4\0\12\33\1\0\2\33"+
    "\22\0\10\33\1\0\3\33\1\0\51\33\2\0\1\33"+
    "\20\0\1\33\5\0\3\33\10\0\3\33\4\0\12\33"+
    "\12\0\6\33\5\0\22\33\3\0\30\33\1\0\11\33"+
    "\1\0\1\33\2\0\7\33\37\0\12\33\21\0\60\33"+
    "\1\0\2\33\14\0\7\33\11\0\12\33\47\0\2\33"+
    "\1\0\1\33\1\0\5\33\1\0\30\33\1\0\1\33"+
    "\1\0\12\33\1\0\2\33\11\0\1\33\2\0\5\33"+
    "\1\0\1\33\11\0\12\33\2\0\4\33\40\0\1\33"+
    "\37\0\12\33\26\0\10\33\1\0\44\33\33\0\5\33"+
    "\163\0\53\33\24\0\13\33\6\0\6\33\4\0\4\33"+
    "\3\0\1\33\3\0\2\33\7\0\3\33\4\0\15\33"+
    "\14\0\1\33\1\0\12\33\6\0\46\33\1\0\1\33"+
    "\5\0\1\33\2\0\53\51\1\0\1\33\3\51\u0149\33"+
    "\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33"+
    "\2\0\51\33\1\0\4\33\2\0\41\33\1\0\4\33"+
    "\2\0\7\33\1\0\1\33\1\0\4\33\2\0\17\33"+
    "\1\0\71\33\1\0\4\33\2\0\103\33\45\0\20\33"+
    "\20\0\126\33\2\0\6\51\3\0\u016c\33\2\0\21\33"+
    "\1\0\32\33\5\0\113\33\6\0\10\33\7\0\15\33"+
    "\1\0\4\33\16\0\22\33\16\0\22\33\16\0\15\33"+
    "\1\0\3\33\17\0\64\33\43\0\1\33\4\0\1\33"+
    "\3\0\12\33\46\0\12\33\6\0\131\33\7\0\5\33"+
    "\2\0\42\33\1\0\1\33\5\0\106\33\12\0\37\33"+
    "\47\0\50\33\2\0\5\33\13\0\54\33\4\0\32\33"+
    "\6\0\12\33\46\0\27\33\11\0\65\33\53\0\12\33"+
    "\6\0\12\33\15\0\1\33\135\0\57\33\21\0\7\33"+
    "\4\0\12\33\51\0\36\33\15\0\70\33\32\0\44\33"+
    "\34\0\12\33\3\0\61\33\2\0\11\51\7\0\53\33"+
    "\2\0\3\33\51\0\4\33\1\0\6\33\1\0\2\33"+
    "\3\0\1\33\5\0\300\51\100\0\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\11\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\11\51\10\33\6\51\2\0"+
    "\6\33\2\0\10\51\10\33\10\51\10\33\6\51\2\0"+
    "\6\33\2\0\10\51\1\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\1\33\10\51\10\33\16\51\2\0\10\51"+
    "\10\33\10\51\10\33\10\51\10\33\5\51\1\0\2\51"+
    "\5\33\1\0\1\51\3\0\3\51\1\0\2\51\5\33"+
    "\3\0\4\51\2\0\2\51\4\33\4\0\10\51\5\33"+
    "\5\0\3\51\1\0\2\51\5\33\164\0\1\51\15\0"+
    "\1\51\20\0\15\51\145\0\1\33\4\0\1\33\2\0"+
    "\1\51\3\33\2\51\3\33\1\51\1\0\1\33\3\0"+
    "\5\33\6\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\4\33\1\0\1\51\4\33\1\51\4\33\1\51\2\0"+
    "\2\51\2\33\5\0\1\33\4\51\4\0\1\51\41\0"+
    "\20\64\3\0\1\33\1\51\u024b\0\32\64\26\0\57\33"+
    "\1\0\57\51\1\0\1\33\1\51\3\33\2\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\4\33\1\51\1\33"+
    "\2\51\1\33\10\51\3\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\2\51\6\0"+
    "\1\33\1\51\1\33\1\51\3\0\1\33\1\51\14\0"+
    "\46\51\1\0\1\51\5\0\1\51\2\0\70\33\7\0"+
    "\1\33\20\0\27\33\11\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\120\0\1\33\325\0\2\33\52\0"+
    "\5\33\5\0\2\33\4\0\126\33\6\0\3\33\1\0"+
    "\132\33\1\0\4\33\5\0\53\33\1\0\136\33\21\0"+
    "\33\33\65\0\306\33\112\0\360\33\20\0\215\33\103\0"+
    "\56\33\2\0\15\33\3\0\34\33\24\0\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\20\0\2\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\1\51\1\33\1\51\1\33\1\51\1\33\1\51"+
    "\1\33\3\51\2\0\106\33\61\0\11\33\2\0\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\3\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\12\51\1\33\1\51\1\33\1\51\2\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\2\0\1\33\1\51\1\33\1\51\2\33"+
    "\1\51\1\33\3\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\1\33\1\51\5\33"+
    "\1\51\5\33\1\51\1\33\1\51\1\33\1\51\1\33"+
    "\1\51\1\33\1\51\1\33\1\51\2\0\1\33\1\51"+
    "\3\33\60\0\1\33\3\51\7\33\1\0\3\33\1\0"+
    "\4\33\1\0\27\33\35\0\64\33\16\0\62\33\34\0"+
    "\12\33\30\0\6\33\3\0\1\33\1\0\2\33\1\0"+
    "\46\33\12\0\27\33\31\0\35\33\7\0\57\33\34\0"+
    "\13\33\6\0\5\33\1\0\31\33\1\0\51\33\27\0"+
    "\3\33\1\0\10\33\4\0\12\33\6\0\27\33\3\0"+
    "\1\33\3\0\62\33\1\0\1\33\3\0\2\33\2\0"+
    "\5\33\2\0\1\33\1\0\1\33\30\0\3\33\2\0"+
    "\13\33\7\0\3\33\14\0\6\33\2\0\6\33\2\0"+
    "\6\33\11\0\7\33\1\0\7\33\1\0\53\51\1\0"+
    "\14\51\10\0\120\51\43\33\15\0\12\33\6\0\244\33"+
    "\14\0\27\33\4\0\61\33\4\0\156\33\2\0\152\33"+
    "\46\0\7\51\14\0\5\51\5\0\1\33\1\0\12\33"+
    "\1\0\15\33\1\0\5\33\1\0\1\33\1\0\2\33"+
    "\1\0\2\33\1\0\154\33\41\0\153\33\22\0\100\33"+
    "\2\0\66\33\50\0\14\33\164\0\5\33\1\0\207\33"+
    "\23\0\12\33\7\0\32\33\6\0\32\51\13\0\131\33"+
    "\3\0\6\33\2\0\6\33\2\0\6\33\2\0\3\33"+
    "\43\0\14\33\1\0\32\33\1\0\23\33\1\0\2\33"+
    "\1\0\17\33\2\0\16\33\42\0\173\33\205\0\35\33"+
    "\3\0\61\33\57\0\40\33\15\0\24\33\1\0\10\33"+
    "\6\0\46\33\12\0\36\33\2\0\44\33\4\0\10\33"+
    "\60\0\50\33\50\51\116\33\2\0\12\33\6\0\44\33"+
    "\4\0\44\51\4\0\50\33\10\0\64\33\234\0\67\33"+
    "\11\0\26\33\12\0\10\33\230\0\6\33\2\0\1\33"+
    "\1\0\54\33\1\0\2\33\3\0\1\33\2\0\27\33"+
    "\12\0\27\33\11\0\37\33\101\0\23\33\1\0\2\33"+
    "\12\0\26\33\12\0\32\33\106\0\70\33\6\0\2\33"+
    "\100\0\1\33\17\0\4\33\1\0\3\33\1\0\35\33"+
    "\52\0\35\33\3\0\35\33\43\0\10\33\1\0\34\33"+
    "\33\0\66\33\12\0\26\33\12\0\23\33\15\0\22\33"+
    "\156\0\111\33\67\0\63\33\15\0\63\51\15\0\44\33"+
    "\14\0\12\33\306\0\35\33\12\0\1\33\10\0\26\33"+
    "\232\0\27\33\14\0\65\33\56\0\12\33\23\0\55\33"+
    "\40\0\31\33\7\0\12\33\11\0\44\33\17\0\12\33"+
    "\4\0\1\33\13\0\43\33\3\0\1\33\14\0\60\33"+
    "\16\0\4\33\13\0\13\33\1\0\1\33\43\0\22\33"+
    "\1\0\31\33\124\0\7\33\1\0\1\33\1\0\4\33"+
    "\1\0\17\33\1\0\12\33\7\0\57\33\21\0\12\33"+
    "\13\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\5\33\3\0\1\33\22\0\1\33"+
    "\14\0\5\33\236\0\65\33\22\0\4\33\5\0\12\33"+
    "\5\0\1\33\40\0\60\33\24\0\2\33\1\0\1\33"+
    "\10\0\12\33\246\0\57\33\51\0\4\33\44\0\60\33"+
    "\24\0\1\33\13\0\12\33\46\0\53\33\15\0\1\33"+
    "\7\0\12\33\66\0\33\33\25\0\12\33\306\0\54\33"+
    "\164\0\40\33\40\51\12\33\25\0\1\33\240\0\10\33"+
    "\2\0\47\33\20\0\1\33\1\0\1\33\34\0\1\33"+
    "\12\0\50\33\7\0\1\33\25\0\1\33\13\0\56\33"+
    "\23\0\1\33\42\0\71\33\7\0\11\33\1\0\45\33"+
    "\21\0\1\33\17\0\12\33\30\0\36\33\160\0\7\33"+
    "\1\0\2\33\1\0\46\33\25\0\1\33\11\0\12\33"+
    "\6\0\6\33\1\0\2\33\1\0\40\33\16\0\1\33"+
    "\7\0\12\33\u0136\0\23\33\15\0\232\33\346\0\304\33"+
    "\274\0\57\33\321\0\107\33\271\0\71\33\7\0\37\33"+
    "\1\0\12\33\146\0\36\33\22\0\60\33\20\0\4\33"+
    "\14\0\12\33\11\0\25\33\5\0\23\33\260\0\40\33"+
    "\40\51\200\0\113\33\5\0\1\33\102\0\15\33\100\0"+
    "\2\33\1\0\1\33\34\0\370\33\10\0\363\33\15\0"+
    "\37\33\61\0\3\33\21\0\4\33\10\0\u018c\33\4\0"+
    "\153\33\5\0\15\33\3\0\11\33\7\0\12\33\146\0"+
    "\32\33\32\51\32\33\7\51\1\0\22\51\32\33\32\51"+
    "\1\33\1\0\2\33\2\0\1\33\2\0\2\33\2\0"+
    "\4\33\1\0\10\33\4\51\1\0\1\51\1\0\7\51"+
    "\1\0\13\51\32\33\32\51\2\33\1\0\4\33\2\0"+
    "\10\33\1\0\7\33\1\0\32\51\2\33\1\0\4\33"+
    "\1\0\5\33\1\0\1\33\3\0\7\33\1\0\32\51"+
    "\32\33\32\51\32\33\32\51\32\33\32\51\32\33\32\51"+
    "\32\33\32\51\32\33\34\51\2\0\31\33\1\0\31\51"+
    "\1\0\6\51\31\33\1\0\31\51\1\0\6\51\31\33"+
    "\1\0\31\51\1\0\6\51\31\33\1\0\31\51\1\0"+
    "\6\51\31\33\1\0\31\51\1\0\6\51\1\33\1\51"+
    "\2\0\137\33\12\0\7\33\2\0\12\33\4\0\1\33"+
    "\u0171\0\54\33\4\0\12\33\6\0\305\33\73\0\42\33"+
    "\42\51\7\0\1\33\4\0\12\33\246\0\4\33\1\0"+
    "\33\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0"+
    "\12\33\1\0\4\33\1\0\1\33\1\0\1\33\6\0"+
    "\1\33\4\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\3\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\2\33\1\0\1\33\2\0\4\33\1\0\7\33\1\0"+
    "\4\33\1\0\4\33\1\0\1\33\1\0\12\33\1\0"+
    "\21\33\5\0\3\33\1\0\5\33\1\0\21\33\104\0"+
    "\327\33\51\0\65\33\13\0\336\33\2\0\u0182\33\16\0"+
    "\u0131\33\37\0\36\33\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28416];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\22\5\1\3\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\31\1\32\7\0\1\23"+
    "\1\33\1\23\1\34\7\0\1\23\1\35\7\0\1\36"+
    "\2\0\1\37\2\0\1\40\10\0\1\41\5\0\1\42"+
    "\3\0\1\43\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\324\0\65\0\u0109"+
    "\0\65\0\65\0\u013e\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212"+
    "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\65\0\65\0\65\0\65\0\u03ef\0\65\0\65\0\65"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u0350\0\u05cc\0\65\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u0350\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u0350\0\u091c\0\u0951\0\65\0\u0986"+
    "\0\u09bb\0\65\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\65\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\65\0\u0ca1\0\u0cd6\0\u0d0b\0\65\0\65\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\3\26"+
    "\1\2\1\31\1\2\1\32\4\2\1\33\1\34\1\2"+
    "\1\35\2\2\1\36\1\37\1\36\1\40\4\36\1\41"+
    "\1\42\1\43\1\36\67\0\1\3\105\0\1\44\56\0"+
    "\1\45\65\0\2\20\70\0\1\46\64\0\1\47\64\0"+
    "\1\50\102\0\1\51\70\0\1\52\56\0\1\53\72\0"+
    "\1\54\50\0\1\55\64\0\1\56\64\0\1\57\51\0"+
    "\2\36\5\0\23\36\1\0\10\36\22\0\2\36\5\0"+
    "\23\36\1\0\4\36\1\60\3\36\22\0\2\36\5\0"+
    "\23\36\1\0\2\36\1\61\2\36\1\62\2\36\4\0"+
    "\2\45\1\3\1\4\61\45\36\0\1\63\70\0\1\64"+
    "\65\0\1\65\64\0\1\66\53\0\1\67\11\0\1\70"+
    "\56\0\1\71\63\0\1\72\45\0\2\36\5\0\23\36"+
    "\1\0\6\36\1\73\1\36\22\0\2\36\5\0\23\36"+
    "\1\0\7\36\1\74\54\0\1\75\60\0\1\76\54\0"+
    "\1\77\66\0\1\100\76\0\1\101\55\0\1\102\63\0"+
    "\1\103\42\0\2\36\5\0\23\36\1\0\1\36\1\104"+
    "\6\36\44\0\1\105\66\0\1\106\51\0\1\107\66\0"+
    "\1\110\73\0\1\111\64\0\1\112\53\0\1\113\64\0"+
    "\1\114\102\0\1\115\56\0\1\116\54\0\1\117\71\0"+
    "\1\120\74\0\1\121\56\0\1\122\72\0\1\123\64\0"+
    "\1\124\64\0\1\125\45\0\1\126\70\0\1\127\60\0"+
    "\1\130\106\0\1\131\63\0\1\132\55\0\1\133\73\0"+
    "\1\134\47\0\1\135\77\0\1\136\51\0\1\137\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\10\11\1\1\1\11\1\1\2\11"+
    "\3\1\1\11\12\1\4\11\1\1\3\11\7\0\3\1"+
    "\1\11\7\0\2\1\7\0\1\1\2\0\1\11\2\0"+
    "\1\11\10\0\1\11\5\0\1\11\3\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    int get_line(){
        return yyline;
    }
    int get_column(){
        return yycolumn;
    }
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(Symbols.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new LexicalException(yyline, yycolumn, yytext());
            }
            // fall through
          case 38: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 39: break;
          case 3:
            { return symbol(Symbols.SHARP);
            }
            // fall through
          case 40: break;
          case 4:
            { return symbol(Symbols.PERCENT);
            }
            // fall through
          case 41: break;
          case 5:
            { return symbol(Symbols.LPAREN);
            }
            // fall through
          case 42: break;
          case 6:
            { return symbol(Symbols.RPAREN);
            }
            // fall through
          case 43: break;
          case 7:
            { return symbol(Symbols.TIMES);
            }
            // fall through
          case 44: break;
          case 8:
            { return symbol(Symbols.PLUS);
            }
            // fall through
          case 45: break;
          case 9:
            { return symbol(Symbols.MINUS);
            }
            // fall through
          case 46: break;
          case 10:
            { return symbol(Symbols.DOT);
            }
            // fall through
          case 47: break;
          case 11:
            { return symbol(Symbols.DIVIDE);
            }
            // fall through
          case 48: break;
          case 12:
            { if (yylength() > 12) {
                            throw new LexicalException(yyline, yycolumn, "Integer");
                        }
                        else {
                            return symbol(Symbols.INTEGER, yytext());
                        }
            }
            // fall through
          case 49: break;
          case 13:
            { return symbol(Symbols.COLON);
            }
            // fall through
          case 50: break;
          case 14:
            { return symbol(Symbols.SEMI);
            }
            // fall through
          case 51: break;
          case 15:
            { return symbol(Symbols.LESS);
            }
            // fall through
          case 52: break;
          case 16:
            { return symbol(Symbols.EQUAL);
            }
            // fall through
          case 53: break;
          case 17:
            { return symbol(Symbols.GREAT);
            }
            // fall through
          case 54: break;
          case 18:
            { return symbol(Symbols.NOTENAME, yytext());
            }
            // fall through
          case 55: break;
          case 19:
            { if (yylength() > 24) {
                            throw new LexicalException(yyline, yycolumn, "Identifier");
                        }
                        else {
                            return symbol(Symbols.IDENTIFIER, yytext());
                        }
            }
            // fall through
          case 56: break;
          case 20:
            { return symbol(Symbols.LCURLY);
            }
            // fall through
          case 57: break;
          case 21:
            { return symbol(Symbols.BAR);
            }
            // fall through
          case 58: break;
          case 22:
            { return symbol(Symbols.RCURLY);
            }
            // fall through
          case 59: break;
          case 23:
            { return symbol(Symbols.NEQ);
            }
            // fall through
          case 60: break;
          case 24:
            { return symbol(Symbols.LEQ);
            }
            // fall through
          case 61: break;
          case 25:
            { return symbol(Symbols.EQUIV);
            }
            // fall through
          case 62: break;
          case 26:
            { return symbol(Symbols.GEQ);
            }
            // fall through
          case 63: break;
          case 27:
            { return symbol(Symbols.IF);
            }
            // fall through
          case 64: break;
          case 28:
            { return symbol(Symbols.BPM);
            }
            // fall through
          case 65: break;
          case 29:
            { return symbol(Symbols.INT);
            }
            // fall through
          case 66: break;
          case 30:
            { return symbol(Symbols.ELSE);
            }
            // fall through
          case 67: break;
          case 31:
            { return symbol(Symbols.MUSIC);
            }
            // fall through
          case 68: break;
          case 32:
            { return symbol(Symbols.TEMPO);
            }
            // fall through
          case 69: break;
          case 33:
            { return symbol(Symbols.SEGMENT);
            }
            // fall through
          case 70: break;
          case 34:
            { return symbol(Symbols.VELOC);
            }
            // fall through
          case 71: break;
          case 35:
            { return symbol(Symbols.CUROC);
            }
            // fall through
          case 72: break;
          case 36:
            { return symbol(Symbols.INSTR);
            }
            // fall through
          case 73: break;
          case 37:
            { return symbol(Symbols.SETOCT);
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
