
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import java.io.*;
import java.util.*;
import write_midi.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\040\004\000\002\002\004\000\002\037" +
    "\004\000\002\037\003\000\002\007\014\000\002\002\005" +
    "\000\002\003\005\000\002\004\005\000\002\005\005\000" +
    "\002\006\005\000\002\041\004\000\002\042\004\000\002" +
    "\042\005\000\002\036\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\043\004\000\002\032\007\000\002\022\007\000\002" +
    "\023\006\000\002\025\006\000\002\025\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\026\007\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\030\004\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\010\004\000\002\017\005\000\002\017\005\000\002\016" +
    "\004\000\002\015\004\000\002\015\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\014\004\000\002\013\004\000\002\013\004\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\004\000\002\021\003\000\002\011\004\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\004\005\010\001\002\000\006\004\046\013" +
    "\043\001\002\000\006\004\ufffe\013\ufffe\001\002\000\004" +
    "\002\040\001\002\000\004\027\013\001\002\000\004\032" +
    "\011\001\002\000\004\046\012\001\002\000\004\027\ufffc" +
    "\001\002\000\004\006\014\001\002\000\004\032\036\001" +
    "\002\000\004\027\016\001\002\000\004\007\020\001\002" +
    "\000\004\027\023\001\002\000\004\032\021\001\002\000" +
    "\004\046\022\001\002\000\004\027\ufffa\001\002\000\004" +
    "\010\025\001\002\000\004\027\030\001\002\000\004\032" +
    "\026\001\002\000\004\046\027\001\002\000\004\027\ufff9" +
    "\001\002\000\004\011\031\001\002\000\004\032\034\001" +
    "\002\000\004\027\033\001\002\000\006\004\ufffd\013\ufffd" +
    "\001\002\000\004\046\035\001\002\000\004\027\ufff8\001" +
    "\002\000\004\046\037\001\002\000\004\027\ufffb\001\002" +
    "\000\004\002\000\001\002\000\006\031\057\037\214\001" +
    "\002\000\016\012\053\014\071\015\063\031\057\037\066" +
    "\045\067\001\002\000\004\045\051\001\002\000\006\004" +
    "\uffff\013\uffff\001\002\000\004\002\001\001\002\000\004" +
    "\045\047\001\002\000\004\036\050\001\002\000\016\012" +
    "\ufff1\014\ufff1\015\ufff1\031\ufff1\037\ufff1\045\ufff1\001\002" +
    "\000\004\036\052\001\002\000\006\031\ufff5\037\ufff5\001" +
    "\002\000\004\045\207\001\002\000\016\012\053\014\071" +
    "\015\063\031\057\037\174\045\067\001\002\000\016\012" +
    "\uffef\014\uffef\015\uffef\031\uffef\037\uffef\045\uffef\001\002" +
    "\000\016\012\ufff0\014\ufff0\015\ufff0\031\ufff0\037\ufff0\045" +
    "\ufff0\001\002\000\012\040\150\041\145\042\154\044\151" +
    "\001\002\000\012\040\150\041\145\042\154\044\151\001" +
    "\002\000\016\012\uffec\014\uffec\015\uffec\031\uffec\037\uffec" +
    "\045\uffec\001\002\000\016\012\uffed\014\uffed\015\uffed\031" +
    "\uffed\037\uffed\045\uffed\001\002\000\004\042\122\001\002" +
    "\000\014\012\053\014\071\015\063\031\057\045\067\001" +
    "\002\000\016\012\ufff2\014\ufff2\015\ufff2\031\ufff2\037\ufff2" +
    "\045\ufff2\001\002\000\004\002\ufff4\001\002\000\006\027" +
    "\077\032\100\001\002\000\016\012\ufff3\014\ufff3\015\ufff3" +
    "\031\ufff3\037\ufff3\045\ufff3\001\002\000\004\042\073\001" +
    "\002\000\016\012\uffee\014\uffee\015\uffee\031\uffee\037\uffee" +
    "\045\uffee\001\002\000\004\046\074\001\002\000\004\043" +
    "\075\001\002\000\004\027\076\001\002\000\016\012\uffea" +
    "\014\uffea\015\uffea\031\uffea\037\uffea\045\uffea\001\002\000" +
    "\016\012\uffeb\014\uffeb\015\uffeb\031\uffeb\037\uffeb\045\uffeb" +
    "\001\002\000\010\042\103\045\102\046\101\001\002\000" +
    "\032\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\033\uffd5\034\uffd5\043\uffd5\001" +
    "\002\000\032\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\033\uffd6\034\uffd6\043" +
    "\uffd6\001\002\000\010\042\103\045\102\046\101\001\002" +
    "\000\014\017\111\020\110\027\107\033\105\034\106\001" +
    "\002\000\010\042\103\045\102\046\101\001\002\000\010" +
    "\042\103\045\102\046\101\001\002\000\016\012\uffe8\014" +
    "\uffe8\015\uffe8\031\uffe8\037\uffe8\045\uffe8\001\002\000\010" +
    "\042\103\045\102\046\101\001\002\000\010\042\103\045" +
    "\102\046\101\001\002\000\032\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\033" +
    "\uffd9\034\uffd9\043\uffd9\001\002\000\032\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\033\uffd8\034\uffd8\043\uffd8\001\002\000\032\017\111" +
    "\020\110\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\033\uffda\034\uffda\043\uffda\001\002\000\032" +
    "\017\111\020\110\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\033\uffdb\034\106\043\uffdb\001\002" +
    "\000\014\017\111\020\110\033\105\034\106\043\117\001" +
    "\002\000\032\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7\034\uffd7\043" +
    "\uffd7\001\002\000\016\012\uffe2\014\uffe2\015\uffe2\031\uffe2" +
    "\037\uffe2\045\uffe2\001\002\000\016\012\uffe4\014\uffe4\015" +
    "\uffe4\031\uffe4\037\uffe4\045\uffe4\001\002\000\010\042\103" +
    "\045\102\046\101\001\002\000\004\043\141\001\002\000" +
    "\026\017\111\020\110\021\126\022\125\023\130\024\131" +
    "\025\132\026\127\033\105\034\106\001\002\000\010\042" +
    "\103\045\102\046\101\001\002\000\010\042\103\045\102" +
    "\046\101\001\002\000\010\042\103\045\102\046\101\001" +
    "\002\000\010\042\103\045\102\046\101\001\002\000\010" +
    "\042\103\045\102\046\101\001\002\000\010\042\103\045" +
    "\102\046\101\001\002\000\014\017\111\020\110\033\105" +
    "\034\106\043\uffd0\001\002\000\014\017\111\020\110\033" +
    "\105\034\106\043\uffd1\001\002\000\014\017\111\020\110" +
    "\033\105\034\106\043\uffd2\001\002\000\014\017\111\020" +
    "\110\033\105\034\106\043\uffcf\001\002\000\014\017\111" +
    "\020\110\033\105\034\106\043\uffd4\001\002\000\014\017" +
    "\111\020\110\033\105\034\106\043\uffd3\001\002\000\004" +
    "\036\142\001\002\000\014\012\uffe1\014\uffe1\015\uffe1\031" +
    "\uffe1\045\uffe1\001\002\000\006\043\167\044\151\001\002" +
    "\000\016\012\uffce\014\uffce\015\uffce\031\uffce\037\uffce\045" +
    "\uffce\001\002\000\016\027\uffc5\030\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\044\uffc5\001\002\000\016\027\uffc7\030\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\044\uffc7\001\002\000\016\027\165" +
    "\030\164\040\150\041\145\042\154\044\151\001\002\000" +
    "\016\027\uffc6\030\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6" +
    "\001\002\000\026\027\uffbb\030\uffbb\033\156\034\160\035" +
    "\157\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\001\002" +
    "\000\016\027\uffc8\030\uffc8\040\uffc8\041\uffc8\042\uffc8\044" +
    "\uffc8\001\002\000\016\027\uffc9\030\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\044\uffc9\001\002\000\004\044\151\001\002\000" +
    "\006\043\uffc2\044\uffc2\001\002\000\026\027\uffc1\030\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\001\002\000\026\027\uffbf\030\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\001\002\000\026\027\uffc0\030\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\001" +
    "\002\000\026\027\uffbc\030\uffbc\033\156\034\160\035\157" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\001\002\000" +
    "\026\027\uffbd\030\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\001\002\000\026\027" +
    "\uffbe\030\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\001\002\000\012\040\uffcd\041" +
    "\uffcd\042\uffcd\044\uffcd\001\002\000\016\012\uffcb\014\uffcb" +
    "\015\uffcb\031\uffcb\037\uffcb\045\uffcb\001\002\000\016\027" +
    "\uffca\030\uffca\040\uffca\041\uffca\042\uffca\044\uffca\001\002" +
    "\000\016\027\uffc4\030\uffc4\040\uffc4\041\uffc4\042\uffc4\044" +
    "\uffc4\001\002\000\006\043\uffc3\044\uffc3\001\002\000\014" +
    "\030\172\040\150\041\145\042\154\044\151\001\002\000" +
    "\012\040\uffcc\041\uffcc\042\uffcc\044\uffcc\001\002\000\016" +
    "\012\uffe3\014\uffe3\015\uffe3\031\uffe3\037\uffe3\045\uffe3\001" +
    "\002\000\020\012\uffe6\014\uffe6\015\uffe6\016\176\031\uffe6" +
    "\037\uffe6\045\uffe6\001\002\000\016\012\uffe5\014\uffe5\015" +
    "\uffe5\031\uffe5\037\uffe5\045\uffe5\001\002\000\004\036\206" +
    "\001\002\000\016\012\053\014\071\015\063\031\057\037" +
    "\204\045\067\001\002\000\014\012\053\014\071\015\063" +
    "\031\057\045\067\001\002\000\016\012\uffdd\014\uffdd\015" +
    "\uffdd\031\uffdd\037\uffdd\045\uffdd\001\002\000\016\012\uffdf" +
    "\014\uffdf\015\uffdf\031\uffdf\037\uffdf\045\uffdf\001\002\000" +
    "\016\012\uffde\014\uffde\015\uffde\031\uffde\037\uffde\045\uffde" +
    "\001\002\000\016\012\uffe7\014\uffe7\015\uffe7\031\uffe7\037" +
    "\uffe7\045\uffe7\001\002\000\016\012\uffe0\014\uffe0\015\uffe0" +
    "\031\uffe0\037\uffe0\045\uffe0\001\002\000\014\012\uffdc\014" +
    "\uffdc\015\uffdc\031\uffdc\045\uffdc\001\002\000\004\032\210" +
    "\001\002\000\010\042\103\045\102\046\101\001\002\000" +
    "\014\017\111\020\110\027\212\033\105\034\106\001\002" +
    "\000\016\012\uffe9\014\uffe9\015\uffe9\031\uffe9\037\uffe9\045" +
    "\uffe9\001\002\000\006\031\ufff6\037\ufff6\001\002\000\006" +
    "\004\ufff7\013\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\012\002\006\007\004\037\003\040\005\001" +
    "\001\000\012\035\041\036\044\041\043\042\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\212\017\057\001\001\000\026" +
    "\010\067\017\057\022\055\023\054\024\064\025\071\026" +
    "\063\027\053\032\061\043\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\174\017\057\022" +
    "\055\023\054\024\172\025\071\026\063\027\053\032\061" +
    "\043\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\151\012\152\013\142\014\145\015\170\001\001" +
    "\000\016\011\151\012\152\013\142\014\145\015\146\016" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\120\017\057\022\055\023\054\024" +
    "\117\025\071\026\063\027\053\032\061\043\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\115\001\001\000" +
    "\002\001\001\000\004\033\114\001\001\000\004\033\113" +
    "\001\001\000\002\001\001\000\004\033\112\001\001\000" +
    "\004\033\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\123\034\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\137\001\001\000\004\033\136\001\001" +
    "\000\004\033\135\001\001\000\004\033\134\001\001\000" +
    "\004\033\133\001\001\000\004\033\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\151" +
    "\012\165\013\142\014\145\001\001\000\002\001\001\000" +
    "\006\020\161\021\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\151\012\165\013" +
    "\142\014\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\177\031\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\204\017\057\022\055\023\054" +
    "\024\202\025\071\026\063\027\053\032\061\043\060\001" +
    "\001\000\026\010\201\017\057\022\055\023\054\024\200" +
    "\025\071\026\063\027\053\032\061\043\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    int_map = new HashMap<String, Integer>();
    seg_map = new HashMap<String, Integer>();
    beat_notes = new ArrayList<Note>();
    chord_notes = new ArrayList<Note>();
    beat_chords = new ArrayList<ArrayList<Note>>();

    seg_notes = new ArrayList<ArrayList<Note>>();
    seg_chords = new ArrayList<ArrayList<ArrayList<Note>>>();
    seg_durations = new ArrayList<ArrayList<Float>>();

    condition = true;
    buffering = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return getScanner().next_token();

    }


    public MidiWriter mw;
    public String name_of_music;
    public int bpm, cur_ins, cur_oct, strength, tempo;

    public Boolean condition;
    public Boolean buffering;

    public HashMap<String, Integer> seg_map;
    public HashMap<String, Integer> int_map;

    public ArrayList<ArrayList<Note>> seg_notes;
    public ArrayList<ArrayList<ArrayList<Note>>> seg_chords;
    public ArrayList<ArrayList<Float>> seg_durations;
    
    public Note buf_note;
    public ArrayList<Note> beat_notes;
    public ArrayList<Note> chord_notes;
    public ArrayList<ArrayList<Note>> beat_chords;

    public Note last_note;
    public ArrayList<Note> last_chord;
    public int last_note_on_tick;
    public int last_chord_on_tick;
    public float last_note_duration;
    public float last_chord_duration;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mrl_file ::= mrl_file_part music 
            {
              Object RESULT =null;
		
    System.out.println("reducing to mrl_file");
    parser.mw.writeMidiFile("../result/" + name_of_music + ".mid");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mrl_file",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mrl_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mrl_file_part ::= mrl_file_part segment 
            {
              Object RESULT =null;
		
    System.out.println("reducing to mrl_file_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mrl_file_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mrl_file_part ::= config_statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to mrl_file_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mrl_file_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // config_statement ::= bpm_config SEMI ins_config SEMI curoc_config SEMI veloc_config SEMI tempo_config SEMI 
            {
              Object RESULT =null;
		
    System.out.println("reducing to config_statement");
    parser.mw = new MidiWriter(parser.bpm, parser.cur_oct, parser.cur_ins, parser.strength);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bpm_config ::= BPM COLON INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bpm_config");
    parser.bpm = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bpm_config",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ins_config ::= INSTR COLON INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to ins_config");
    parser.cur_ins = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_config",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // curoc_config ::= CUROC COLON INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to curoc_config");
    parser.cur_oct = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("curoc_config",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // veloc_config ::= VELOC COLON INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to veloc_config");
    parser.strength = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("veloc_config",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tempo_config ::= TEMPO COLON INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to tempo_config");
    parser.tempo = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tempo_config",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // segment ::= segment_part RCURLY 
            {
              Object RESULT =null;
		
    System.out.println("reducing to segment");
    parser.buffering = false;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("segment",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // segment_part ::= segment_part section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("segment_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // segment_part ::= SEGMENT IDENTIFIER LCURLY 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to segment_part");
    parser.buffering = true;
    seg_map.put(str.toString(), seg_notes.size());
    seg_notes.add(new ArrayList<Note>());
    seg_chords.add(new ArrayList<ArrayList<Note>>());
    seg_durations.add(new ArrayList<Float>());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("segment_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // music ::= music_part RCURLY 
            {
              Object RESULT =null;
		
    System.out.println("reducing to music");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("music",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // music_part ::= music_part section 
            {
              Object RESULT =null;
		
    System.out.println("reducing to music_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("music_part",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // music_part ::= music_part statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to music_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("music_part",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // music_part ::= MUSIC IDENTIFIER LCURLY 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to music_part");
    parser.name_of_music = str;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("music_part",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= declaration 
            {
              Object RESULT =null;
		
    System.out.println("reducing to statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= assignment 
            {
              Object RESULT =null;
		
    System.out.println("reducing to statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= if_statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= set_octave 
            {
              Object RESULT =null;
		
    System.out.println("reducing to statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= seg_call 
            {
              Object RESULT =null;
		
    System.out.println("reducing to statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // seg_call ::= IDENTIFIER SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to seg_call");
    if (seg_map.containsKey(id.toString())) {
        int i = seg_map.get(id.toString());
        parser.mw.addSequence(seg_notes.get(i), new ArrayList<ArrayList<Note>>(seg_chords.get(i)), seg_durations.get(i));
    }
    else {
        throw new InvalidIdentifierException(id.toString());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seg_call",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_octave ::= SETOCT LPAREN INTEGER RPAREN SEMI 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    System.out.println("reducing to set_octave");
    parser.cur_oct = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_octave",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= INT IDENTIFIER COLON int_expr SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to declaration");
    int_map.put(id.toString(), n.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= IDENTIFIER COLON int_expr SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to assignment");
    if (int_map.containsKey(id.toString())) {
        int_map.replace(id.toString(), n.intValue());
    }
    else {
        throw new InvalidIdentifierException(id.toString());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_statement ::= if_part RCURLY else_part RCURLY 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_statement");
    parser.condition = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_statement ::= if_part RCURLY 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_statement");
    parser.condition = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_part ::= if_part section 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_part ::= if_head section 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_part ::= if_part statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_part ::= if_head statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to if_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_head ::= IF LPAREN bool_expr RPAREN LCURLY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    System.out.println("reducing to if_head");
    if (!b) {
        parser.condition = false;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_head",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // else_part ::= else_part section 
            {
              Object RESULT =null;
		
    System.out.println("reducing to else_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // else_part ::= else_head section 
            {
              Object RESULT =null;
		
    System.out.println("reducing to else_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // else_part ::= else_part statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to else_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // else_part ::= else_head statement 
            {
              Object RESULT =null;
		
    System.out.println("reducing to else_part");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // else_head ::= ELSE LCURLY 
            {
              Object RESULT =null;
		
    System.out.println("reducing to else_head");
    parser.condition = !parser.condition;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_head",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // int_expr ::= int_expr PLUS int_expr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    RESULT = n1.intValue() + n2.intValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // int_expr ::= int_expr MINUS int_expr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    RESULT = n1.intValue() - n2.intValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // int_expr ::= int_expr TIMES int_expr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    RESULT = n1.intValue() * n2.intValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // int_expr ::= int_expr DIVIDE int_expr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    RESULT = n1.intValue() / n2.intValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // int_expr ::= LPAREN int_expr RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("reducing to int_expr");
    RESULT = n.intValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // int_expr ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    if (int_map.containsKey(id.toString())) {
        RESULT = int_map.get(id.toString());
    }
    else {
        throw new InvalidIdentifierException(id.toString());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // int_expr ::= INTEGER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to int_expr");
    RESULT = Integer.valueOf(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_expr ::= int_expr EQUIV int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() == n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_expr ::= int_expr GREAT int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() > n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr ::= int_expr LESS int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() < n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr ::= int_expr GEQ int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() >= n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_expr ::= int_expr LEQ int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() <= n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_expr ::= int_expr NEQ int_expr 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to bool_expr");
    RESULT = (n1.intValue() != n2.intValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // section ::= sec_part sec_end 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (Integer.valueOf(n) == tempo - 1) {
        System.out.println("reducing to section");
    }
    else {
        throw new TempoMismatchedException();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sec_part ::= sec_part beat BAR 
            {
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = x.intValue() + 1;
    System.out.println("reducing to sec_part");
    int n = parser.beat_notes.size();
    if (parser.condition) {
    for(int j = 0; j < n; j++) {
        Note cur_note = parser.beat_notes.get(j);
        int rel_duration = 1;
        if (cur_note.isNote()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_note = cur_note;
            last_note_on_tick = parser.mw.getLastTick();
            last_note_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addNote(cur_note, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(cur_note);
                seg_durations.get(seg_durations.size() - 1).add((float)rel_duration / n);
            }
        }
        else if (cur_note.isRest()) {
            last_note = new Note(false, true);
            if (!parser.buffering) {
                parser.mw.addRest((float)1 / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note(false, true));
                seg_durations.get(seg_durations.size() - 1).add((float)1 / n);
            }
        }
        else if (cur_note.isContinue()) {
            if (last_note.isRest()) {
                throw new NoteContinueException();
            }
            else {
                int k = 1;
                int cont_rel_duration = 1;
                while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                    cont_rel_duration += 1;
                    k += 1;
                }
                j += k - 1;
                if (last_note_on_tick > last_chord_on_tick) {
                    last_note_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addNote(last_note, last_note_duration, last_note_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_note_duration);
                    }
                }
                else {
                    last_chord_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addChord(last_chord, last_chord_duration, last_chord_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_chord_duration);
                    }
                }
            }
        }
        else if (cur_note.isNull()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_chord = beat_chords.get(0);
            beat_chords.remove(0);
            last_chord_on_tick = parser.mw.getLastTick();
            last_chord_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addChord(last_chord, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note());
                seg_chords.get(seg_chords.size() - 1).add(new ArrayList<Note>(last_chord));
                seg_durations.get(seg_notes.size() - 1).add((float)rel_duration / n);
            }
        }
    }
    }
    parser.beat_notes.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sec_part ::= EQUAL beat BAR 
            {
              Integer RESULT =null;
		
    RESULT = (int)1;
    System.out.println("reducing to sec_part");
    int n = parser.beat_notes.size();
    if (parser.condition) {
    for(int j = 0; j < n; j++) {
        Note cur_note = parser.beat_notes.get(j);
        int rel_duration = 1;
        if (cur_note.isNote()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_note = cur_note;
            last_note_on_tick = parser.mw.getLastTick();
            last_note_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addNote(cur_note, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(cur_note);
                seg_durations.get(seg_durations.size() - 1).add((float)rel_duration / n);
            }
        }
        else if (cur_note.isRest()) {
            last_note = new Note(false, true);
            if (!parser.buffering) {
                parser.mw.addRest((float)1 / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note(false, true));
                seg_durations.get(seg_durations.size() - 1).add((float)1 / n);
            }
        }
        else if (cur_note.isContinue()) {
            if (last_note.isRest()) {
                throw new NoteContinueException();
            }
            else {
                int k = 1;
                int cont_rel_duration = 1;
                while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                    cont_rel_duration += 1;
                    k += 1;
                }
                j += k - 1;
                if (last_note_on_tick > last_chord_on_tick) {
                    last_note_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addNote(last_note, last_note_duration, last_note_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_note_duration);
                    }
                }
                else {
                    last_chord_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addChord(last_chord, last_chord_duration, last_chord_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_chord_duration);
                    }
                }
            }
        }
        else if (cur_note.isNull()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_chord = beat_chords.get(0);
            beat_chords.remove(0);
            last_chord_on_tick = parser.mw.getLastTick();
            last_chord_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addChord(last_chord, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note());
                seg_chords.get(seg_chords.size() - 1).add(new ArrayList<Note>(last_chord));
                seg_durations.get(seg_notes.size() - 1).add((float)rel_duration / n);
            }
        }
    }
    }
    parser.beat_notes.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sec_end ::= beat SEMI 
            {
              Object RESULT =null;
		
    System.out.println("reducing to sec_end");
    int n = parser.beat_notes.size();
    if (parser.condition) {
        for(int j = 0; j < n; j++) {
        Note cur_note = parser.beat_notes.get(j);
        int rel_duration = 1;
        if (cur_note.isNote()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_note = cur_note;
            last_note_on_tick = parser.mw.getLastTick();
            last_note_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addNote(cur_note, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(cur_note);
                seg_durations.get(seg_durations.size() - 1).add((float)rel_duration / n);
            }
        }
        else if (cur_note.isRest()) {
            last_note = new Note(false, true);
            if (!parser.buffering) {
                parser.mw.addRest((float)1 / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note(false, true));
                seg_durations.get(seg_durations.size() - 1).add((float)1 / n);
            }
        }
        else if (cur_note.isContinue()) {
            if (last_note.isRest()) {
                throw new NoteContinueException();
            }
            else {
                int k = 1;
                int cont_rel_duration = 1;
                while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                    cont_rel_duration += 1;
                    k += 1;
                }
                j += k - 1;
                if (last_note_on_tick > last_chord_on_tick) {
                    last_note_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addNote(last_note, last_note_duration, last_note_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_note_duration);
                    }
                }
                else {
                    last_chord_duration += (float)cont_rel_duration / n;
                    if (!parser.buffering) {
                        parser.mw.addChord(last_chord, last_chord_duration, last_chord_on_tick);
                    }
                    else {
                        int s1 = seg_durations.size();
                        int s2 = seg_durations.get(s1).size();
                        seg_durations.get(s1).set(s2, last_chord_duration);
                    }
                }
            }
        }
        else if (cur_note.isNull()) {
            int k = 1;
            while ((j + k < n) && parser.beat_notes.get(j+k).isContinue()) {
                rel_duration += 1;
                k += 1;
            }
            j += k - 1;
            last_chord = beat_chords.get(0);
            beat_chords.remove(0);
            last_chord_on_tick = parser.mw.getLastTick();
            last_chord_duration = (float)rel_duration / n;
            if (!parser.buffering) {
                parser.mw.addChord(last_chord, (float)rel_duration / n);
            }
            else {
                seg_notes.get(seg_notes.size() - 1).add(new Note());
                seg_chords.get(seg_chords.size() - 1).add(new ArrayList<Note>(last_chord));
                seg_durations.get(seg_notes.size() - 1).add((float)rel_duration / n);
            }
        }
    }
    }
    parser.beat_notes.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_end",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // beat ::= beat sound 
            {
              Object RESULT =null;
		
    System.out.println("reducing to beat");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // beat ::= sound 
            {
              Object RESULT =null;
		
    System.out.println("reducing to beat");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sound ::= note 
            {
              Object RESULT =null;
		
    System.out.println("reducing to sound");
    parser.beat_notes.add(parser.buf_note);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sound ::= chord 
            {
              Object RESULT =null;
		
    System.out.println("reducing to sound");
    parser.beat_notes.add(new Note());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sound ::= DOT 
            {
              Object RESULT =null;
		
    System.out.println("reducing to sound");
    parser.beat_notes.add(new Note(true, false));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sound ::= PERCENT 
            {
              Object RESULT =null;
		
    System.out.println("reducing to sound");
    parser.beat_notes.add(new Note(false, true));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // chord ::= chord_part RPAREN 
            {
              Object RESULT =null;
		
    System.out.println("reducing to chord");
    parser.beat_chords.add(new ArrayList<Note>(parser.chord_notes));
    parser.chord_notes.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chord",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // chord_part ::= chord_part note 
            {
              Object RESULT =null;
		
    System.out.println("reducing to chord_part");
    parser.chord_notes.add(parser.buf_note);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chord_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // chord_part ::= LPAREN note 
            {
              Object RESULT =null;
		
    System.out.println("reducing to chord_part");
    parser.chord_notes.add(parser.buf_note);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chord_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // note_postfix ::= PLUS 
            {
              String RESULT =null;
		
    System.out.println("reducing to note_postfix");
    RESULT = new String("+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note_postfix",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // note_postfix ::= MINUS 
            {
              String RESULT =null;
		
    System.out.println("reducing to note_postfix");
    RESULT = new String("-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note_postfix",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // note_postfix ::= SHARP 
            {
              String RESULT =null;
		
    System.out.println("reducing to note_postfix");
    RESULT = new String("#");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note_postfix",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // note_postfixes ::= note_postfixes note_postfix 
            {
              String RESULT =null;
		int pf2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pf2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pf2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pf3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pf3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pf3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to note_postfixes");
    RESULT = pf2.toString() + pf3.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note_postfixes",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // note_postfixes ::= note_postfix 
            {
              String RESULT =null;
		int pf1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pf1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pf1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to note_postfixes");
    RESULT = pf1.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note_postfixes",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // note ::= NOTENAME note_postfixes 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to note");
    int note_oct = parser.cur_oct;
    boolean sharp = false;
    for (int i = 0; i < pf.length(); i++) {
        if (pf.charAt(i) == '+') {
            note_oct += 1;
        }
        else if (pf.charAt(i) == '-') {
            note_oct -= 1;
        }
        else if (pf.charAt(i) == '#') {
            sharp = !sharp;
        }
    }
    parser.buf_note = new Note(x.toString(), note_oct, sharp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // note ::= NOTENAME 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("reducing to note");
    parser.buf_note = new Note(y.toString(), parser.cur_oct, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("note",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
